{"version":3,"sources":["algorithms/dijkstra.js","algorithms/aStarSearch.js","algorithms/greedyBestFirstSearch.js","algorithms/getNodesInShortestPathOrder.js","algorithms/depthFirstSearch.js","algorithms/breadthFirstSearch.js","PathfindingVisualizer/PathfindingVisualizerFunctionalComponent.jsx","PathfindingVisualizer/Node/Node.jsx","App.js","reportWebVitals.js","index.js"],"names":["dijkstra","grid","startNode","endNode","visitedNodesInOrder","unvisitedNodes","nodes","i","length","j","push","getGrid","distance","curNode","sortNodesByDistance","shift","isWall","isVisited","updateNeighbors","toCompare","notCompare","sort","a","b","concat","node","unvisitedNeighbors","neighbors","col","row","filter","neighbor","getUnvisitedNeighbors","prevNode","aStarSearch","closedSet","openSet","gCost","hCost","fCost","nodeA","nodeB","newMovementCost","Math","abs","greedyBestFirstSearch","sortNodesByHCost","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","undefined","unshift","depthFirstSearch","stack","getUnvisitedNeighbor","breadthFirstSearch","status","bombNodeRow","bombNodeCol","mouseIsPressed","startMouseIsPressed","finishMouseIsPressed","bombMouseIsPressed","bombRow","bombCol","Node","isFinish","isStart","isBomb","onMouseDown","onMouseEnter","onMouseUp","onMouseLeave","useState","wall","setWall","start","setStart","finish","setFinish","bomb","setBomb","useEffect","isBombActive","changeNode","changeStart","className","changeFinish","changeBomb","id","algorithmDisplayed","algorithmDone","mouseOnStart","mouseOnFinish","mouseOnBomb","startNodeRow","startNodeCol","finishNodeRow","finishNodeCol","bombDisplay","createNode","getInitialGrid","makeClickable","document","getElementById","classList","remove","clearPath","resetGrid","clearWalls","PathfindingVisualizerFunctionalComponent","animationSpeed","setAnmationSpeed","algorithm","setAlgorithm","tutorialCounter","setTutorialCounter","tutorialCounterIncrease","prev","style","visibility","tutorialCounterDecrease","title","setTimeout","href","target","rel","onClick","src","alt","paddingTop","class","newGrid","slice","newNode","bombFunction","pointerEvents","aSpeed","shortestPathSpeed","visitedNodesInOrderTwo","finishNode","gridAfterBomb","nodesInShortestPathOrderTwo","nodeTwo","animateShortestPathWithBomb","animateSecond","animateWithBomb","animateShortestPath","animate","makeAlgorithm","map","getGridWithWallToggled","handleMouseDown","makeStart","displayAlgorithmAfterwards","makeFinish","makeBomb","handleMouseEnter","deleteStart","deleteFinish","deleteBomb","handleMouseLeave","createNewNode","nodeCopy","nodeToFix","bombNode","animateAfterBomb","animateAfter","animateShortestPathAfterWithBomb","includes","animateShortestPathAfter","window","onclick","event","matches","dropdowns","getElementsByClassName","openDropdown","contains","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ed9ecd22.chunk.js","sourcesContent":["export function dijkstra(grid, startNode, endNode) {\r\n  const visitedNodesInOrder = [];\r\n  let unvisitedNodes = getGrid(grid);\r\n  startNode.distance = 0;\r\n\r\n  while (!!unvisitedNodes.length) {\r\n    unvisitedNodes = sortNodesByDistance(unvisitedNodes);\r\n    const curNode = unvisitedNodes.shift();\r\n    if (curNode.isWall && curNode !== startNode && curNode !== endNode)\r\n      continue;\r\n    if (curNode.distance === \"Infinity\") return visitedNodesInOrder;\r\n    curNode.isVisited = true;\r\n    visitedNodesInOrder.push(curNode);\r\n    if (curNode === endNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    updateNeighbors(curNode, grid);\r\n  }\r\n}\r\n\r\nexport function sortNodesByDistance(unvisitedNodes) {\r\n  const toCompare = [];\r\n  const notCompare = [];\r\n  for (let i = 0; i < unvisitedNodes.length; i++) {\r\n    if (unvisitedNodes[i].distance !== \"Infinity\") {\r\n      toCompare.push(unvisitedNodes[i]);\r\n    } else {\r\n      notCompare.push(unvisitedNodes[i]);\r\n    }\r\n  }\r\n  toCompare.sort((a, b) => a.distance - b.distance);\r\n  const result = toCompare.concat(notCompare);\r\n  return result;\r\n}\r\n\r\nexport function updateNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (let i = 0; i < unvisitedNeighbors.length; i++) {\r\n    unvisitedNeighbors[i].distance = node.distance + 1;\r\n    unvisitedNeighbors[i].prevNode = node;\r\n  }\r\n}\r\n\r\nexport function getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nexport function getGrid(grid) {\r\n  let nodes = [];\r\n  for (let i = 0; i < grid.length; i++) {\r\n    for (let j = 0; j < grid[i].length; j++) {\r\n      nodes.push(grid[i][j]);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n","export function aStarSearch(grid, startNode, endNode) {\r\n  const closedSet = [];\r\n  const openSet = getGrid(grid);\r\n  startNode.gCost = 0;\r\n  startNode.hCost = hCost(startNode, endNode);\r\n  startNode.fCost = fCost(startNode);\r\n\r\n  while (openSet.length > 0) {\r\n    sortNodesByDistance(openSet);\r\n    const curNode = openSet.shift();\r\n    closedSet.push(curNode);\r\n    curNode.isVisited = true;\r\n    if (curNode === endNode) {\r\n      return closedSet;\r\n    }\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\r\n\r\n    if (curNode.gCost === 1000) {\r\n      return closedSet;\r\n    }\r\n    updateNeighbors(curNode, unvisitedNeighbors, endNode, startNode);\r\n  }\r\n}\r\n\r\nexport function sortNodesByHCost(openSet) {\r\n  openSet.sort((a, b) => a.hCost - b.hCost);\r\n}\r\n\r\nexport function updateNeighbors(node, unvisitedNeighbors, endNode, startNode) {\r\n  for (let i = 0; i < unvisitedNeighbors.length; i++) {\r\n    const neighbor = unvisitedNeighbors[i];\r\n    if (neighbor.isWall && neighbor !== startNode && neighbor !== endNode)\r\n      continue;\r\n    const newMovementCost = node.gCost + 1;\r\n    if (newMovementCost < neighbor.gCost) {\r\n      neighbor.gCost = newMovementCost;\r\n      neighbor.prevNode = node;\r\n    }\r\n    neighbor.hCost = hCost(neighbor, endNode);\r\n    neighbor.fCost = fCost(neighbor);\r\n  }\r\n}\r\n\r\nexport function getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nexport function getDistance(nodeA, nodeB) {\r\n  const distaceX = Math.abs(nodeA.col - nodeB.col);\r\n  const distanceY = Math.abs(nodeA.row - nodeB.row);\r\n  const distaceTotal = distaceX + distanceY;\r\n  return distaceTotal;\r\n}\r\n\r\nexport function getGrid(grid) {\r\n  let nodes = [];\r\n  for (let i = 0; i < grid.length; i++) {\r\n    for (let j = 0; j < grid[i].length; j++) {\r\n      nodes.push(grid[i][j]);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nexport function sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort(function (nodeA, nodeB) {\r\n    if (nodeA.fCost < nodeB.fCost) return -1;\r\n    if (nodeA.fCost > nodeB.fCost) return 1;\r\n    if (nodeA.hCost < nodeB.hCost) return -1;\r\n    if (nodeA.hCost > nodeB.hCost) return 1;\r\n  });\r\n}\r\n\r\nexport function fCost(node) {\r\n  const fCost = node.gCost + node.hCost;\r\n  return fCost;\r\n}\r\n\r\nexport function hCost(curNode, endNode) {\r\n  const distanceX = Math.abs(curNode.col - endNode.col);\r\n  const distanceY = Math.abs(curNode.row - endNode.row);\r\n  return distanceX + distanceY;\r\n}\r\n","export function greedyBestFirstSearch(grid, startNode, endNode) {\r\n  const closedSet = [];\r\n  const openSet = getGrid(grid);\r\n  startNode.gCost = 0;\r\n  startNode.hCost = hCost(startNode, endNode);\r\n  startNode.fCost = fCost(startNode);\r\n\r\n  while (openSet.length > 0) {\r\n    sortNodesByHCost(openSet);\r\n    const curNode = openSet.shift();\r\n    if (curNode.gCost === 1000) {\r\n      return closedSet;\r\n    }\r\n    closedSet.push(curNode);\r\n    curNode.isVisited = true;\r\n    if (curNode === endNode) {\r\n      return closedSet;\r\n    }\r\n    updateNeighbors(curNode, grid, endNode, startNode);\r\n  }\r\n}\r\n\r\nexport function sortNodesByHCost(openSet) {\r\n  openSet.sort((a, b) => a.hCost - b.hCost);\r\n}\r\n\r\nexport function updateNeighbors(node, grid, endNode, startNode) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (let i = 0; i < unvisitedNeighbors.length; i++) {\r\n    const neighbor = unvisitedNeighbors[i];\r\n    if (neighbor.isWall && neighbor !== startNode && neighbor !== endNode)\r\n      continue;\r\n    const newMovementCost = node.gCost + 1;\r\n    if (newMovementCost < neighbor.gCost) {\r\n      neighbor.gCost = newMovementCost;\r\n      neighbor.prevNode = node;\r\n    }\r\n    neighbor.hCost = hCost(neighbor, endNode);\r\n    neighbor.fCost = fCost(neighbor);\r\n  }\r\n}\r\n\r\nexport function getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nexport function getDistance(nodeA, nodeB) {\r\n  const distaceX = Math.abs(nodeA.col - nodeB.col);\r\n  const distanceY = Math.abs(nodeA.row - nodeB.row);\r\n  const distaceTotal = distaceX + distanceY;\r\n  return distaceTotal;\r\n}\r\n\r\nexport function getGrid(grid) {\r\n  let nodes = [];\r\n  for (let i = 0; i < grid.length; i++) {\r\n    for (let j = 0; j < grid[i].length; j++) {\r\n      nodes.push(grid[i][j]);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nexport function sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort(function (nodeA, nodeB) {\r\n    if (nodeA.fCost < nodeB.fCost) return -1;\r\n    if (nodeA.fCost > nodeB.fCost) return 1;\r\n    if (nodeA.hCost < nodeB.hCost) return -1;\r\n    if (nodeA.hCost > nodeB.hCost) return 1;\r\n  });\r\n}\r\n\r\nexport function fCost(node) {\r\n  const fCost = node.gCost + node.hCost;\r\n  return fCost;\r\n}\r\n\r\nexport function hCost(curNode, endNode) {\r\n  const distanceX = Math.abs(curNode.col - endNode.col);\r\n  const distanceY = Math.abs(curNode.row - endNode.row);\r\n  return distanceX + distanceY;\r\n}\r\n","export function getNodesInShortestPathOrder(endNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = endNode;\r\n  while (currentNode !== undefined) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.prevNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function depthFirstSearch(grid, startNode, endNode) {\r\n  const stack = [];\r\n  const visitedNodesInOrder = [];\r\n  visitedNodesInOrder.push(startNode);\r\n\r\n  stack.push(startNode);\r\n  while (stack.length > 0) {\r\n    const curNode = stack[0];\r\n    curNode.isVisited = true;\r\n    if (curNode === endNode) {\r\n      visitedNodesInOrder.push(curNode);\r\n      return visitedNodesInOrder;\r\n    }\r\n    const neighbor = getUnvisitedNeighbor(curNode, grid, endNode);\r\n    if (neighbor === 0) {\r\n      stack.shift();\r\n    } else {\r\n      stack.unshift(neighbor);\r\n      visitedNodesInOrder.push(neighbor);\r\n      neighbor.prevNode = curNode;\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nexport function getUnvisitedNeighbor(node, grid, endNode) {\r\n  let neighbor = 0;\r\n  const { col, row } = node;\r\n  if (row > 0 && !grid[row - 1][col].isVisited && !grid[row - 1][col].isWall) {\r\n    neighbor = grid[row - 1][col];\r\n  } else if (\r\n    col < grid[0].length - 1 &&\r\n    !grid[row][col + 1].isVisited &&\r\n    !grid[row][col + 1].isWall\r\n  ) {\r\n    neighbor = grid[row][col + 1];\r\n  } else if (\r\n    row < grid.length - 1 &&\r\n    !grid[row + 1][col].isVisited &&\r\n    !grid[row + 1][col].isWall\r\n  ) {\r\n    neighbor = grid[row + 1][col];\r\n  } else if (\r\n    col > 0 &&\r\n    !grid[row][col - 1].isVisited &&\r\n    !grid[row][col - 1].isWall\r\n  ) {\r\n    neighbor = grid[row][col - 1];\r\n  }\r\n  return neighbor;\r\n}\r\n\r\nexport function getGrid(grid) {\r\n  let nodes = [];\r\n  for (let i = 0; i < grid.length; i++) {\r\n    for (let j = 0; j < grid[i].length; j++) {\r\n      nodes.push(grid[i][j]);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n","export function breadthFirstSearch(grid, startNode, endNode) {\r\n  const stack = [];\r\n  const visitedNodesInOrder = [];\r\n  startNode.status = 2;\r\n  startNode.distance = 1;\r\n  stack.push(startNode);\r\n  while (stack.length > 0) {\r\n    const curNode = stack.shift();\r\n\r\n    if (curNode === endNode || curNode.distance === \"Infinity\") {\r\n      visitedNodesInOrder.push(curNode);\r\n      return visitedNodesInOrder;\r\n    }\r\n    if (curNode.isWall && curNode !== startNode && curNode !== endNode) {\r\n      continue;\r\n    }\r\n    visitedNodesInOrder.push(curNode);\r\n    curNode.status = 3;\r\n\r\n    const neighbors = getUnvisitedNeighbors(curNode, grid);\r\n    for (let i = 0; i < neighbors.length; i++) {\r\n      neighbors[i].status = 2;\r\n      neighbors[i].distance = 1;\r\n      neighbors[i].prevNode = curNode;\r\n      stack.push(neighbors[i]);\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nexport function sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((a, b) => a.distance - b.distance);\r\n}\r\n\r\nexport function getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter((neighbor) => neighbor.status === 1);\r\n}\r\n\r\nexport function getGrid(grid) {\r\n  let nodes = [];\r\n  for (let i = 0; i < grid.length; i++) {\r\n    for (let j = 0; j < grid[i].length; j++) {\r\n      nodes.push(grid[i][j]);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { dijkstra } from \"../algorithms/dijkstra\";\r\nimport { recursiveDivision } from \"../algorithms/recursiveDivision\";\r\nimport { aStarSearch } from \"../algorithms/aStarSearch.js\";\r\nimport { greedyBestFirstSearch } from \"../algorithms/greedyBestFirstSearch.js\";\r\nimport { getNodesInShortestPathOrder } from \"../algorithms/getNodesInShortestPathOrder.js\";\r\nimport { depthFirstSearch } from \"../algorithms/depthFirstSearch.js\";\r\nimport { breadthFirstSearch } from \"../algorithms/breadthFirstSearch.js\";\r\nimport Node from \"./Node/Node.jsx\";\r\nimport \"./PathfindingVisualizer.css\";\r\nimport \"./Node/Node.css\";\r\n\r\nlet algorithmDisplayed = \"\";\r\nlet algorithmDone = false;\r\nlet mouseIsPressed = false;\r\nlet mouseOnStart = false;\r\nlet mouseOnFinish = false;\r\nlet mouseOnBomb = false;\r\nexport let startNodeRow = 15;\r\nexport let startNodeCol = 19;\r\nexport let finishNodeRow = 15;\r\nexport let finishNodeCol = 55;\r\nlet bombDisplay = \"Add a bomb\";\r\nexport let isBombActive = false;\r\nexport let bombNodeRow;\r\nexport let bombNodeCol;\r\nexport let clear = false;\r\nexport let grid = getInitialGrid(\r\n  startNodeRow,\r\n  startNodeCol,\r\n  finishNodeRow,\r\n  finishNodeCol,\r\n  bombNodeRow,\r\n  bombNodeCol\r\n);\r\n\r\nconst PathfindingVisualizerFunctionalComponent = () => {\r\n  const [animationSpeed, setAnmationSpeed] = useState(\"Fast\");\r\n  const [bomb, setBomb] = useState(true);\r\n  const [algorithm, setAlgorithm] = useState(\"\");\r\n  const [tutorialCounter, setTutorialCounter] = useState(1);\r\n  useEffect(() => {\r\n    document.title = \"Pathfinding Visualizer\";\r\n  }, []);\r\n\r\n  function tutorialCounterIncrease() {\r\n    if (tutorialCounter < 9) {\r\n      setTutorialCounter((prev) => prev + 1);\r\n    } else {\r\n      document.getElementById(\"tutorialNine\").style.visibility = \"hidden\";\r\n    }\r\n  }\r\n\r\n  function tutorialCounterDecrease() {\r\n    if (tutorialCounter > 1) {\r\n      setTutorialCounter((prev) => prev - 1);\r\n    }\r\n  }\r\n\r\n  setTimeout(() => {\r\n    makeVisible();\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"tutorial-hidden\" id=\"tutorialNine\">\r\n        <div className=\"tutorialCounter\">{tutorialCounter}/9</div>\r\n\r\n        <h3>Enjoy!</h3>\r\n        <h6>\r\n          I hope you have just as much fun playing around with this\r\n          visualization tool as I had building it!\r\n        </h6>\r\n        <p className=\"paragraphTutorial\">\r\n          If you want to see the source code for this application, check out my{\" \"}\r\n          <a\r\n            href=\"https://github.com/LudwigFritsch\"\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            github\r\n          </a>\r\n          .<br></br>\r\n          You can checkout the github of the original project made by Clément\r\n          Mihailescu{\" \"}\r\n          <a\r\n            href=\"https://github.com/clementmihailescu/Pathfinding-Visualizer\"\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            here\r\n          </a>\r\n          .\r\n        </p>\r\n\r\n        <button\r\n          className=\"skipButton\"\r\n          onClick={() => {\r\n            document.getElementById(\"tutorialNine\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"grid\").className = \"grid\";\r\n            makeClickable();\r\n          }}\r\n        >\r\n          Skip Tutorial\r\n        </button>\r\n        <button\r\n          className=\"previousButton\"\r\n          onClick={() => {\r\n            tutorialCounterDecrease();\r\n            document.getElementById(\"tutorialNine\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"tutorialEight\").className = \"tutorial\";\r\n          }}\r\n        >\r\n          Previous\r\n        </button>\r\n        <button\r\n          className=\"nextButton\"\r\n          onClick={() => {\r\n            tutorialCounterIncrease();\r\n            document.getElementById(\"tutorialNine\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"grid\").className = \"grid\";\r\n            makeClickable();\r\n          }}\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"tutorial-hidden\" id=\"tutorialEight\">\r\n        <div className=\"tutorialCounter\">{tutorialCounter}/9</div>\r\n\r\n        <h3>Visualizing and more</h3>\r\n        <h6>\r\n          Use the navbar buttons to visualize algorithms and to do other stuff!\r\n        </h6>\r\n        <p className=\"paragraphTutorial\">\r\n          You can clear the current path, clear walls and weights, clear the\r\n          entire board, and adjust the visualization speed, all from the navbar.\r\n          If you want to access this tutorial again, click on \"Pathfinding\r\n          Visualizer\" in the top left corner of your screen.\r\n        </p>\r\n        <img\r\n          src=\"https://i.ibb.co/sFRv4KG/nav.png\"\r\n          alt=\"\"\r\n          className=\"imageTutorial imageTutorialNav\"\r\n        />\r\n\r\n        <button\r\n          className=\"skipButton\"\r\n          onClick={() => {\r\n            document.getElementById(\"tutorialEight\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"grid\").className = \"grid\";\r\n            makeClickable();\r\n          }}\r\n        >\r\n          Skip Tutorial\r\n        </button>\r\n        <button\r\n          className=\"previousButton\"\r\n          onClick={() => {\r\n            tutorialCounterDecrease();\r\n            document.getElementById(\"tutorialEight\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"tutorialSeven\").className = \"tutorial\";\r\n          }}\r\n        >\r\n          Previous\r\n        </button>\r\n        <button\r\n          className=\"nextButton\"\r\n          onClick={() => {\r\n            tutorialCounterIncrease();\r\n            document.getElementById(\"tutorialEight\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"tutorialNine\").className = \"tutorial\";\r\n          }}\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"tutorial-hidden\" id=\"tutorialSeven\">\r\n        <div className=\"tutorialCounter\">{tutorialCounter}/9</div>\r\n\r\n        <h3>Dragging nodes</h3>\r\n        <h6>Click and drag the start, bomb, and target nodes to move them.</h6>\r\n        <p className=\"paragraphTutorial\">\r\n          Note that you can drag nodes even after an algorithm has finished\r\n          running. This will allow you to instantly see different paths.\r\n        </p>\r\n        <img\r\n          src=\"https://s3.gifyu.com/images/dragggg.gif\"\r\n          alt=\"\"\r\n          className=\"imageTutorial imageTutorialGivSeven\"\r\n        />\r\n\r\n        <button\r\n          className=\"skipButton\"\r\n          onClick={() => {\r\n            document.getElementById(\"tutorialSeven\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"grid\").className = \"grid\";\r\n            makeClickable();\r\n          }}\r\n        >\r\n          Skip Tutorial\r\n        </button>\r\n        <button\r\n          className=\"previousButton\"\r\n          onClick={() => {\r\n            tutorialCounterDecrease();\r\n            document.getElementById(\"tutorialSeven\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"tutorialSix\").className = \"tutorial\";\r\n          }}\r\n        >\r\n          Previous\r\n        </button>\r\n        <button\r\n          className=\"nextButton\"\r\n          onClick={() => {\r\n            tutorialCounterIncrease();\r\n            document.getElementById(\"tutorialSeven\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"tutorialEight\").className = \"tutorial\";\r\n          }}\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"tutorial-hidden\" id=\"tutorialSix\">\r\n        <div className=\"tutorialCounter\">{tutorialCounter}/9</div>\r\n\r\n        <h3>Adding a bomb</h3>\r\n        <h6>Click the \"Add Bomb\" button.</h6>\r\n        <p className=\"paragraphTutorial\">\r\n          Adding a bomb will change the course of the chosen algorithm. In other\r\n          words, the algorithm will first look for the bomb (in an effort to\r\n          diffuse it) and will then look for the target node. Note that the\r\n          Bidirectional Swarm Algorithm does not support adding a bomb.\r\n        </p>\r\n        <img\r\n          src=\"https://i.ibb.co/vQPnf0t/bomb.png\"\r\n          alt=\"\"\r\n          className=\"imageTutorial imageTutorialSix\"\r\n        />\r\n\r\n        <button\r\n          className=\"skipButton\"\r\n          onClick={() => {\r\n            document.getElementById(\"tutorialSix\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"grid\").className = \"grid\";\r\n            makeClickable();\r\n          }}\r\n        >\r\n          Skip Tutorial\r\n        </button>\r\n        <button\r\n          className=\"previousButton\"\r\n          onClick={() => {\r\n            tutorialCounterDecrease();\r\n            document.getElementById(\"tutorialSix\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"tutorialFive\").className = \"tutorial\";\r\n          }}\r\n        >\r\n          Previous\r\n        </button>\r\n        <button\r\n          className=\"nextButton\"\r\n          onClick={() => {\r\n            tutorialCounterIncrease();\r\n            document.getElementById(\"tutorialSix\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"tutorialSeven\").className = \"tutorial\";\r\n          }}\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"tutorial-hidden\" id=\"tutorialFive\">\r\n        <div className=\"tutorialCounter\">{tutorialCounter}/9</div>\r\n\r\n        <h3>Adding walls</h3>\r\n        <h6>Click on the grid to add a wall.</h6>\r\n        <p className=\"paragraphTutorial\">\r\n          Walls are impenetrable, meaning that a path cannot cross through them.\r\n        </p>\r\n        <img\r\n          src=\"https://i.ibb.co/zHnMSkr/addWalls.gif\"\r\n          alt=\"\"\r\n          className=\"imageTutorial imageTutorialGivFive\"\r\n        />\r\n\r\n        <button\r\n          className=\"skipButton\"\r\n          onClick={() => {\r\n            document.getElementById(\"tutorialFive\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"grid\").className = \"grid\";\r\n            makeClickable();\r\n          }}\r\n        >\r\n          Skip Tutorial\r\n        </button>\r\n        <button\r\n          className=\"previousButton\"\r\n          onClick={() => {\r\n            tutorialCounterDecrease();\r\n            document.getElementById(\"tutorialFive\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"tutorialFour\").className = \"tutorial\";\r\n          }}\r\n        >\r\n          Previous\r\n        </button>\r\n        <button\r\n          className=\"nextButton\"\r\n          onClick={() => {\r\n            tutorialCounterIncrease();\r\n            document.getElementById(\"tutorialFive\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"tutorialSix\").className = \"tutorial\";\r\n          }}\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"tutorial-hidden\" id=\"tutorialFour\">\r\n        <div className=\"tutorialCounter\">{tutorialCounter}/9</div>\r\n\r\n        <h3>Meet the algorithms</h3>\r\n        <h6>Not all algorithms are created equal.</h6>\r\n        <p className=\"paragraphTutorial\">\r\n          <div>\r\n            <p className=\"algorithmTutorial\" style={{ paddingTop: \"5px\" }}>\r\n              <strong>Dijkstra's Algorithm </strong>(weighted): the father of\r\n              pathfinding algorithms, guarantees the shortest path\r\n            </p>\r\n            <p> </p>\r\n          </div>\r\n\r\n          <div>\r\n            <p className=\"algorithmTutorial\">\r\n              <strong>A* Search</strong>(weighted): arguably the best\r\n              pathfinding algorithm, uses heuristics to guarantee the shortest\r\n              path much faster than Dijkstra's Algorithm\r\n            </p>\r\n          </div>\r\n\r\n          <div>\r\n            <p className=\"algorithmTutorial\">\r\n              <strong>Greedy Best-first Search</strong>(weighted): a faster,\r\n              more heuristic-heavy version of A*, does not guarantee the\r\n              shortest path\r\n            </p>\r\n          </div>\r\n\r\n          <div>\r\n            <p className=\"algorithmTutorial\">\r\n              <strong>Breath-first Search</strong>(unweighted): a great\r\n              algorithm, guarantees the shortest path\r\n            </p>\r\n          </div>\r\n\r\n          <div>\r\n            <p className=\"algorithmTutorial\">\r\n              <strong>Depth-first Search</strong>(unweighted): a very bad\r\n              algorithm for pathfinding, does not guarantee the shortest path\r\n            </p>\r\n          </div>\r\n        </p>\r\n\r\n        <button\r\n          className=\"skipButton\"\r\n          onClick={() => {\r\n            document.getElementById(\"tutorialFour\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"grid\").className = \"grid\";\r\n            makeClickable();\r\n          }}\r\n        >\r\n          Skip Tutorial\r\n        </button>\r\n        <button\r\n          className=\"previousButton\"\r\n          onClick={() => {\r\n            tutorialCounterDecrease();\r\n            document.getElementById(\"tutorialFour\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"tutorialThree\").className = \"tutorial\";\r\n          }}\r\n        >\r\n          Previous\r\n        </button>\r\n        <button\r\n          className=\"nextButton\"\r\n          onClick={() => {\r\n            tutorialCounterIncrease();\r\n            document.getElementById(\"tutorialFour\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"tutorialFive\").className = \"tutorial\";\r\n          }}\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"tutorial-hidden\" id=\"tutorialThree\">\r\n        <div className=\"tutorialCounter\">{tutorialCounter}/9</div>\r\n\r\n        <h3>Picking an algorithm</h3>\r\n        <h6>Choose an algorithm from the \"Algorithms\" drop-down menu.</h6>\r\n        <p className=\"paragraphTutorial\">\r\n          Note that some algorithms are unweighted, while others are weighted.\r\n          Unweighted algorithms do not take turns or weight nodes into account,\r\n          whereas weighted ones do. Additionally, not all algorithms guarantee\r\n          the shortest path.\r\n        </p>\r\n        <img\r\n          src=\"https://i.ibb.co/f2zTpHQ/algos.png\"\r\n          alt=\"\"\r\n          className=\"imageTutorial\"\r\n        />\r\n\r\n        <button\r\n          className=\"skipButton\"\r\n          onClick={() => {\r\n            document.getElementById(\"tutorialThree\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"grid\").className = \"grid\";\r\n            makeClickable();\r\n          }}\r\n        >\r\n          Skip Tutorial\r\n        </button>\r\n        <button\r\n          className=\"previousButton\"\r\n          onClick={() => {\r\n            tutorialCounterDecrease();\r\n            document.getElementById(\"tutorialThree\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"tutorialTwo\").className = \"tutorial\";\r\n          }}\r\n        >\r\n          Previous\r\n        </button>\r\n        <button\r\n          className=\"nextButton\"\r\n          onClick={() => {\r\n            tutorialCounterIncrease();\r\n            document.getElementById(\"tutorialThree\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"tutorialFour\").className = \"tutorial\";\r\n          }}\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"tutorial-hidden\" id=\"tutorialTwo\">\r\n        <div className=\"tutorialCounter\">{tutorialCounter}/9</div>\r\n\r\n        <h3>What is a pathfinding algorithm?</h3>\r\n        <h6>\r\n          At its core, a pathfinding algorithm seeks to find the shortest path\r\n          between two points. This application visualizes various pathfinding\r\n          algorithms in action, and more!\r\n        </h6>\r\n        <p className=\"paragraphTutorial\">\r\n          All of the algorithms on this application are adapted for a 2D grid,\r\n          where 90 degree turns have a \"cost\" of 1 and movements from a node to\r\n          another have a \"cost\" of 1.\r\n        </p>\r\n        <img\r\n          src=\"https://i.ibb.co/dBxK3WN/path.png\"\r\n          alt=\"\"\r\n          className=\"imageTutorial\"\r\n        />\r\n\r\n        <button\r\n          className=\"skipButton\"\r\n          onClick={() => {\r\n            document.getElementById(\"tutorialTwo\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"grid\").className = \"grid\";\r\n            makeClickable();\r\n          }}\r\n        >\r\n          Skip Tutorial\r\n        </button>\r\n        <button\r\n          className=\"previousButton\"\r\n          onClick={() => {\r\n            tutorialCounterDecrease();\r\n            document.getElementById(\"tutorialTwo\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"tutorialOne\").className = \"tutorial\";\r\n          }}\r\n        >\r\n          Previous\r\n        </button>\r\n        <button\r\n          className=\"nextButton\"\r\n          onClick={() => {\r\n            tutorialCounterIncrease();\r\n            document.getElementById(\"tutorialTwo\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"tutorialThree\").className = \"tutorial\";\r\n          }}\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"tutorial\" id=\"tutorialOne\">\r\n        <div className=\"tutorialCounter\">{tutorialCounter}/9</div>\r\n\r\n        <h3>Welcome to Pathfinding Visualizer!</h3>\r\n        <h6>\r\n          This short tutorial will walk you through all of the features of this\r\n          application.\r\n        </h6>\r\n        <p className=\"paragraphTutorial\">\r\n          If you want to dive right in, feel free to press the \"Skip Tutorial\"\r\n          button below. Otherwise, press \"Next\"!\r\n        </p>\r\n        <img\r\n          src=\"https://i.ibb.co/Fgx4FgN/c-icon.png\"\r\n          alt=\"\"\r\n          className=\"imageTutorial\"\r\n        />\r\n\r\n        <button\r\n          className=\"skipButton\"\r\n          onClick={() => {\r\n            document.getElementById(\"tutorialOne\").style.visibility = \"hidden\";\r\n            document.getElementById(\"grid\").className = \"grid\";\r\n            makeClickable();\r\n          }}\r\n        >\r\n          Skip Tutorial\r\n        </button>\r\n        <button className=\"previousButton\">Previous</button>\r\n        <button\r\n          className=\"nextButton\"\r\n          onClick={() => {\r\n            tutorialCounterIncrease();\r\n            document.getElementById(\"tutorialOne\").className =\r\n              \"tutorial-hidden\";\r\n            document.getElementById(\"tutorialTwo\").className = \"tutorial\";\r\n          }}\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n\r\n      {/* // */}\r\n      {/* // */}\r\n      {/* // */}\r\n      {/* // */}\r\n      {/* // */}\r\n      {/* // */}\r\n      {/* // */}\r\n      {/* // */}\r\n      {/* // */}\r\n      {/* // */}\r\n\r\n      <div className=\"navBar\" id=\"navBar\">\r\n        <a\r\n          href=\"http://LudwigFritsch.github.io/PathfindingVisualizer\"\r\n          className=\"homeButton\"\r\n        >\r\n          PathfindingVisualizer\r\n        </a>\r\n\r\n        <ul className=\"menu cf click\" id=\"click\">\r\n          <li>\r\n            <a>Algorithms ▼</a>\r\n            <ul class=\"submenu\" id=\"submenu\">\r\n              <li>\r\n                <a\r\n                  onClick={() => {\r\n                    algorithmDisplayed = \"Dijkstra´s\";\r\n                    setAlgorithm(\"dijkstra\");\r\n                  }}\r\n                >\r\n                  Dijkstra`s Algorithm\r\n                </a>\r\n              </li>\r\n              <li>\r\n                <a\r\n                  onClick={() => {\r\n                    setAlgorithm(\"aStar\");\r\n                    algorithmDisplayed = \"A*\";\r\n                  }}\r\n                >\r\n                  A* Search\r\n                </a>\r\n              </li>\r\n              <li>\r\n                <a\r\n                  onClick={() => {\r\n                    setAlgorithm(\"greedy\");\r\n                    algorithmDisplayed = \"Greedy\";\r\n                  }}\r\n                >\r\n                  Greedy Best First Search\r\n                </a>\r\n              </li>\r\n              <li>\r\n                <a\r\n                  onClick={() => {\r\n                    setAlgorithm(\"breadth\");\r\n                    algorithmDisplayed = \"BFS\";\r\n                  }}\r\n                >\r\n                  Breadth-first Search\r\n                </a>\r\n              </li>\r\n              <li>\r\n                <a\r\n                  onClick={() => {\r\n                    setAlgorithm(\"depth\");\r\n                    algorithmDisplayed = \"DFS\";\r\n                  }}\r\n                >\r\n                  Depth-first Search\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n\r\n        <button\r\n          id=\"click1\"\r\n          className=\"click\"\r\n          onClick={() => {\r\n            setBomb(!bomb);\r\n            bombFunction(bomb);\r\n          }}\r\n        >\r\n          {bombDisplay}\r\n        </button>\r\n        <button\r\n          id=\"click2\"\r\n          className=\"visualize click\"\r\n          onClick={() => {\r\n            if (algorithm === \"\") return;\r\n            document.getElementById(\"grid\").className = \"grid-not-clickable\";\r\n            document.getElementById(\"click\").style.pointerEvents = \"none\";\r\n            document.getElementById(\"click1\").style.pointerEvents = \"none\";\r\n            document.getElementById(\"click2\").style.pointerEvents = \"none\";\r\n            document.getElementById(\"click3\").style.pointerEvents = \"none\";\r\n            document.getElementById(\"click4\").style.pointerEvents = \"none\";\r\n            document.getElementById(\"click5\").style.pointerEvents = \"none\";\r\n            document.getElementById(\"click6\").style.pointerEvents = \"none\";\r\n            makeAlgorithm(algorithm, animationSpeed);\r\n          }}\r\n        >\r\n          Visualize {algorithmDisplayed}\r\n        </button>\r\n        <button\r\n          id=\"click3\"\r\n          className=\"click\"\r\n          onClick={() => {\r\n            algorithmDisplayed = \"\";\r\n            setAlgorithm(\"\");\r\n            clearPath();\r\n            clearWalls();\r\n          }}\r\n        >\r\n          Clear Bord\r\n        </button>\r\n        <button\r\n          id=\"click4\"\r\n          className=\"click\"\r\n          onClick={() => {\r\n            clearPath();\r\n            clearWalls();\r\n          }}\r\n        >\r\n          Clear walls\r\n        </button>\r\n        <button id=\"click5\" className=\"click\" onClick={clearPath}>\r\n          Clear Path\r\n        </button>\r\n\r\n        <ul id=\"click6\" className=\"menu cf click\">\r\n          <li>\r\n            <a>Speed: {animationSpeed} ▼</a>\r\n            <ul class=\"submenu-speed\">\r\n              <li>\r\n                <a\r\n                  onClick={() => {\r\n                    setAnmationSpeed(\"Fast\");\r\n                  }}\r\n                >\r\n                  Fast\r\n                </a>\r\n              </li>\r\n              <li>\r\n                <a\r\n                  onClick={() => {\r\n                    setAnmationSpeed(\"Average\");\r\n                  }}\r\n                >\r\n                  Average\r\n                </a>\r\n              </li>\r\n              <li>\r\n                <a\r\n                  onClick={() => {\r\n                    setAnmationSpeed(\"Slow\");\r\n                  }}\r\n                >\r\n                  Slow\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <div className=\"explanationSection\">\r\n        <div className=\"nodes\">\r\n          <div className=\"nodeExplanation\">\r\n            <img\r\n              src=\"https://svgshare.com/getbyhash/sha1-yAWHMbXmBhkwTLV77DIPjK7SHn4=\"\r\n              alt=\"startNode\"\r\n            />\r\n            <p className=\"node-description\"> Start Node</p>\r\n          </div>\r\n          <div className=\"nodeExplanation\">\r\n            <img\r\n              src=\"https://svgshare.com/getbyhash/sha1-c7hqbypOmeOvdRvpH2Af8e2mbnU=\"\r\n              alt=\"startNode\"\r\n            />\r\n            <p className=\"node-description\"> Target Node</p>\r\n          </div>\r\n          <div className=\"nodeExplanation\">\r\n            <img\r\n              src=\"https://svgshare.com/getbyhash/sha1-azrTpZ1HoMGS3EXrju+GximBV64=\"\r\n              alt=\"startNode\"\r\n            />\r\n            <p className=\"node-description\"> Bomb Node</p>\r\n          </div>\r\n\r\n          <div className=\"nodeExplanation\">\r\n            <div className=\"unvisited-node-explanation\"></div>\r\n            <p> Unvisited Node</p>\r\n          </div>\r\n          <div className=\"nodeExplanation\">\r\n            <div className=\"visitedNodes\">\r\n              <div className=\"visited-node-explanation-green\"></div>\r\n              <div className=\"visited-node-explanation-purple\"></div>\r\n            </div>\r\n\r\n            <p> Visited Node</p>\r\n          </div>\r\n          <div className=\"nodeExplanation\">\r\n            <div className=\"shortest-node-explanation\"></div>\r\n            <p> Shortest Node</p>\r\n          </div>\r\n          <div className=\"nodeExplanation\">\r\n            <div className=\"wall-node-explanation\"></div>\r\n            <p> Wall Node</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid-not-clickable\" id=\"grid\">\r\n        {grid.map((row) => {\r\n          return row.map((node) => {\r\n            const { row, col, isFinish, isStart, isWall, isBomb } = node;\r\n            return (\r\n              <Node\r\n                id={`node-${row}-${col}`}\r\n                row={row}\r\n                col={col}\r\n                isFinish={isFinish}\r\n                isStart={isStart}\r\n                isWall={isWall}\r\n                isBomb={isBomb}\r\n                key={`node-${row}-${col}`}\r\n                onMouseDown={(row, col, isStart, isFinish, bomb) => {\r\n                  handleMouseDown(row, col, isStart, isFinish, bomb);\r\n                }}\r\n                onMouseEnter={(row, col) => {\r\n                  handleMouseEnter(row, col);\r\n                }}\r\n                onMouseUp={(row, col) => handleMouseUp(row, col)}\r\n                onMouseLeave={(row, col) => {\r\n                  handleMouseLeave(row, col);\r\n                }}\r\n              />\r\n            );\r\n          });\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport function bombFunction(bomb) {\r\n  bombNodeRow = 15;\r\n  bombNodeCol = 37;\r\n\r\n  const newGrid = changeBomb(grid, bombNodeRow, bombNodeCol, bomb);\r\n  grid = newGrid;\r\n  isBombActive = !isBombActive;\r\n  bombDisplay = bombDisplay === \"Add a bomb\" ? \"Remove bomb\" : \"Add a bomb\";\r\n  if (!isBombActive) {\r\n    grid = getGrid(startNodeRow, startNodeCol, finishNodeRow, finishNodeCol);\r\n    resetGrid();\r\n  }\r\n  if (isBombActive)\r\n    document.getElementById(`node-${bombNodeRow}-${bombNodeCol}`).className =\r\n      \"node-bomb\";\r\n  else\r\n    document.getElementById(`node-${bombNodeRow}-${bombNodeCol}`).className =\r\n      \"node\";\r\n}\r\n\r\nexport function makeClickable() {\r\n  document.getElementById(\"click\").classList.remove(\"click\");\r\n  document.getElementById(\"click1\").classList.remove(\"click\");\r\n  document.getElementById(\"click2\").classList.remove(\"click\");\r\n  document.getElementById(\"click3\").classList.remove(\"click\");\r\n  document.getElementById(\"click4\").classList.remove(\"click\");\r\n  document.getElementById(\"click5\").classList.remove(\"click\");\r\n  document.getElementById(\"click6\").classList.remove(\"click\");\r\n}\r\n\r\nexport function clearBord() {\r\n  startNodeRow = 15;\r\n  startNodeCol = 19;\r\n  finishNodeRow = 15;\r\n  finishNodeCol = 55;\r\n  bombNodeRow = 15;\r\n  bombNodeCol = 37;\r\n  algorithmDone = false;\r\n}\r\n\r\nexport function clearPath() {\r\n  algorithmDone = false;\r\n  grid = getGrid(\r\n    startNodeRow,\r\n    startNodeCol,\r\n    finishNodeRow,\r\n    finishNodeCol,\r\n    bombNodeRow,\r\n    bombNodeCol\r\n  );\r\n  resetGrid();\r\n}\r\n\r\nexport function clearWalls() {\r\n  algorithmDone = false;\r\n  for (let i = 0; i < grid.length; i++) {\r\n    for (let j = 0; j < grid[i].length; j++) {\r\n      const node = grid[i][j];\r\n      node.isWall = false;\r\n      if (!grid[i][j].isStart && !grid[i][j].isFinish && !grid[i][j].isBomb)\r\n        document.getElementById(`node-${i}-${j}`).className = \"node\";\r\n    }\r\n  }\r\n}\r\n\r\nexport default PathfindingVisualizerFunctionalComponent;\r\n\r\nwindow.onclick = function (event) {\r\n  if (!event.target.matches(\".dropdown-algorithms\")) {\r\n    let dropdowns = document.getElementsByClassName(\"algorithms-content\");\r\n    for (let i = 0; i < dropdowns.length; i++) {\r\n      var openDropdown = dropdowns[i];\r\n      if (openDropdown.classList.contains(\"show\")) {\r\n        openDropdown.classList.remove(\"show\");\r\n      }\r\n    }\r\n  }\r\n  if (!event.target.matches(\".dropdown-animationSpeed\")) {\r\n    let dropdowns = document.getElementsByClassName(\"animationSpeed-content\");\r\n    for (let i = 0; i < dropdowns.length; i++) {\r\n      openDropdown = dropdowns[i];\r\n      if (openDropdown.classList.contains(\"show\")) {\r\n        openDropdown.classList.remove(\"show\");\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport function displayAnimationSpeed() {\r\n  document.getElementById(\"animationSpeed\").classList.toggle(\"show\");\r\n}\r\n\r\nexport function displayAlgorithms() {\r\n  document.getElementById(\"algorithms\").classList.toggle(\"show\");\r\n}\r\n\r\nexport function createNode(\r\n  row,\r\n  col,\r\n  startNodeRow,\r\n  startNodeCol,\r\n  finishNodeRow,\r\n  finishNodeCol,\r\n  bombNodeRow,\r\n  bombNodeCol\r\n) {\r\n  return {\r\n    row: row,\r\n    col: col,\r\n    isStart: row === startNodeRow && col === startNodeCol,\r\n    isFinish: row === finishNodeRow && col === finishNodeCol,\r\n    isWall: false,\r\n    isVisited: false,\r\n    distance: \"Infinity\",\r\n    prevNode: \"none\",\r\n    gCost: 1000,\r\n    hCost: 1000,\r\n    fCost: 1000,\r\n    status: 1,\r\n    isBomb: row === bombNodeRow && col === bombNodeCol,\r\n  };\r\n}\r\n\r\nexport function createNewNode(\r\n  row,\r\n  col,\r\n  startNodeRow,\r\n  startNodeCol,\r\n  finishNodeRow,\r\n  finishNodeCol,\r\n  wall,\r\n  bombNodeRow,\r\n  bombNodeCol\r\n) {\r\n  return {\r\n    row: row,\r\n    col: col,\r\n    isStart: row === startNodeRow && col === startNodeCol,\r\n    isFinish: row === finishNodeRow && col === finishNodeCol,\r\n    isWall: wall,\r\n    isVisited: false,\r\n    distance: \"Infinity\",\r\n    prevNode: \"none\",\r\n    gCost: 1000,\r\n    hCost: 1000,\r\n    fCost: 1000,\r\n    status: 1,\r\n    isBomb: row === bombNodeRow && col === bombNodeCol,\r\n  };\r\n}\r\n\r\nexport function getGrid(\r\n  startNodeRow,\r\n  startNodeCol,\r\n  finishNodeRow,\r\n  finishNodeCol,\r\n  bombNodeRow,\r\n  bombNodeCol\r\n) {\r\n  const newGrid = [];\r\n  for (let i = 0; i < grid.length; i++) {\r\n    let row = [];\r\n    for (let j = 0; j < grid[i].length; j++) {\r\n      const node = grid[i][j];\r\n\r\n      row.push(\r\n        createNewNode(\r\n          i,\r\n          j,\r\n          startNodeRow,\r\n          startNodeCol,\r\n          finishNodeRow,\r\n          finishNodeCol,\r\n          node.isWall,\r\n          bombNodeRow,\r\n          bombNodeCol\r\n        )\r\n      );\r\n    }\r\n    newGrid.push(row);\r\n  }\r\n  return newGrid;\r\n}\r\n\r\nexport function getGridClearWalls(\r\n  startNodeRow,\r\n  startNodeCol,\r\n  finishNodeRow,\r\n  finishNodeCol,\r\n  bombNodeRow,\r\n  bombNodeCol\r\n) {\r\n  const newGrid = [];\r\n  for (let i = 0; i < grid.length; i++) {\r\n    let row = [];\r\n    for (let j = 0; j < grid[i].length; j++) {\r\n      row.push(\r\n        createNewNode(\r\n          i,\r\n          j,\r\n          startNodeRow,\r\n          startNodeCol,\r\n          finishNodeRow,\r\n          finishNodeCol,\r\n          false,\r\n          bombNodeRow,\r\n          bombNodeCol\r\n        )\r\n      );\r\n    }\r\n    newGrid.push(row);\r\n  }\r\n  return newGrid;\r\n}\r\n\r\nexport function getInitialGrid(\r\n  startNodeRow,\r\n  startNodeCol,\r\n  finishNodeRow,\r\n  finishNodeCol,\r\n  bombNodeRow,\r\n  bombNodeCol\r\n) {\r\n  const grid = [];\r\n  for (let i = 0; i < 31; i++) {\r\n    let row = [];\r\n    for (let j = 0; j < 75; j++) {\r\n      row.push(\r\n        createNode(\r\n          i,\r\n          j,\r\n          startNodeRow,\r\n          startNodeCol,\r\n          finishNodeRow,\r\n          finishNodeCol,\r\n          bombNodeRow,\r\n          bombNodeCol\r\n        )\r\n      );\r\n    }\r\n    grid.push(row);\r\n  }\r\n  return grid;\r\n}\r\n\r\nexport function resetGrid() {\r\n  for (let row = 0; row < grid.length; row++) {\r\n    for (let col = 0; col < grid[row].length; col++) {\r\n      const nodeCopy = grid[row][col];\r\n      const node = document.getElementById(`node-${row}-${col}`);\r\n      if (!nodeCopy.isWall) {\r\n        node.className = \"node\";\r\n      }\r\n      if (row === startNodeRow && col === startNodeCol)\r\n        node.className = \"node-start\";\r\n      if (row === finishNodeRow && col === finishNodeCol)\r\n        node.className = \"node-finish\";\r\n      if (row === bombNodeRow && col === bombNodeCol && isBombActive)\r\n        node.className = \"node-bomb\";\r\n    }\r\n  }\r\n  try {\r\n    if (isBombActive)\r\n      document.getElementById(`node-${bombNodeRow}-${bombNodeCol}`).className =\r\n        \"node-bomb\";\r\n  } catch {}\r\n}\r\n\r\nexport function makeGridOnFirstRender() {\r\n  for (let row = 0; row < grid.length; row++) {\r\n    for (let col = 0; col < grid[row].length; col++) {\r\n      const node = document.getElementById(`node-${row}-${col}`);\r\n      node.className = \"node\";\r\n\r\n      if (row === startNodeRow && col === startNodeCol)\r\n        node.className = \"node-start\";\r\n      if (row === finishNodeRow && col === finishNodeCol)\r\n        node.className = \"node-finish\";\r\n      if (row === bombNodeRow && col === bombNodeCol && isBombActive)\r\n        node.className = \"node-bomb\";\r\n    }\r\n  }\r\n}\r\n\r\nexport function makeAlgorithm(algorithm, aSpeed) {\r\n  grid = getGrid(startNodeRow, startNodeCol, finishNodeRow, finishNodeCol);\r\n  resetGrid();\r\n  let animationSpeed;\r\n  let shortestPathSpeed;\r\n  let visitedNodesInOrder;\r\n  let visitedNodesInOrderTwo;\r\n\r\n  if (aSpeed === \"Fast\") {\r\n    animationSpeed = 12;\r\n    shortestPathSpeed = 45;\r\n  } else if (aSpeed === \"Average\") {\r\n    animationSpeed = 25;\r\n    shortestPathSpeed = 50;\r\n  } else {\r\n    animationSpeed = 70;\r\n    shortestPathSpeed = 70;\r\n  }\r\n\r\n  // if (algorithm === \"\") return;\r\n  const startNode = grid[startNodeRow][startNodeCol];\r\n  const finishNode = grid[finishNodeRow][finishNodeCol];\r\n  let bomb;\r\n  try {\r\n    bomb = grid[bombNodeRow][bombNodeCol];\r\n  } catch {}\r\n\r\n  if (!isBombActive) {\r\n    if (algorithm === \"dijkstra\") {\r\n      visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    } else if (algorithm === \"aStar\") {\r\n      visitedNodesInOrder = aStarSearch(grid, startNode, finishNode);\r\n    } else if (algorithm === \"greedy\") {\r\n      visitedNodesInOrder = greedyBestFirstSearch(grid, startNode, finishNode);\r\n    } else if (algorithm === \"depth\") {\r\n      visitedNodesInOrder = depthFirstSearch(grid, startNode, finishNode);\r\n    } else if (algorithm === \"breadth\") {\r\n      visitedNodesInOrder = breadthFirstSearch(grid, startNode, finishNode);\r\n    }\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    animate(\r\n      visitedNodesInOrder,\r\n      nodesInShortestPathOrder,\r\n      animationSpeed,\r\n      shortestPathSpeed\r\n    );\r\n  } else {\r\n    let nodesInShortestPathOrder = [];\r\n    if (algorithm === \"dijkstra\") {\r\n      visitedNodesInOrder = dijkstra(grid, startNode, bomb);\r\n      nodesInShortestPathOrder = getNodesInShortestPathOrder(bomb);\r\n      gridAfterBomb();\r\n      visitedNodesInOrderTwo = dijkstra(grid, bomb, finishNode);\r\n    } else if (algorithm === \"aStar\") {\r\n      visitedNodesInOrder = aStarSearch(grid, startNode, bomb);\r\n      nodesInShortestPathOrder = getNodesInShortestPathOrder(bomb);\r\n      gridAfterBomb();\r\n      visitedNodesInOrderTwo = aStarSearch(grid, bomb, finishNode);\r\n    } else if (algorithm === \"greedy\") {\r\n      visitedNodesInOrder = greedyBestFirstSearch(grid, startNode, bomb);\r\n      nodesInShortestPathOrder = getNodesInShortestPathOrder(bomb);\r\n      gridAfterBomb();\r\n      visitedNodesInOrderTwo = greedyBestFirstSearch(grid, bomb, finishNode);\r\n    } else if (algorithm === \"depth\") {\r\n      visitedNodesInOrder = depthFirstSearch(grid, startNode, bomb);\r\n      nodesInShortestPathOrder = getNodesInShortestPathOrder(bomb);\r\n      gridAfterBomb();\r\n      visitedNodesInOrderTwo = depthFirstSearch(grid, bomb, finishNode);\r\n    } else if (algorithm === \"breadth\") {\r\n      visitedNodesInOrder = breadthFirstSearch(grid, startNode, bomb);\r\n      nodesInShortestPathOrder = getNodesInShortestPathOrder(bomb);\r\n      gridAfterBomb();\r\n      visitedNodesInOrderTwo = breadthFirstSearch(grid, bomb, finishNode);\r\n    }\r\n\r\n    const nodesInShortestPathOrderTwo = getNodesInShortestPathOrder(finishNode);\r\n\r\n    animateWithBomb(\r\n      visitedNodesInOrder,\r\n      nodesInShortestPathOrder,\r\n      visitedNodesInOrderTwo,\r\n      animationSpeed,\r\n      shortestPathSpeed,\r\n      nodesInShortestPathOrderTwo\r\n    );\r\n  }\r\n}\r\n\r\nexport function gridAfterBomb() {\r\n  for (let i = 0; i < grid.length; i++) {\r\n    for (let j = 0; j < grid[i].length; j++) {\r\n      const node = grid[i][j];\r\n\r\n      node.isVisited = false;\r\n      node.distance = \"Infinity\";\r\n      node.prevNode = \"none\";\r\n      node.gCost = 10000;\r\n      node.hCost = 10000;\r\n      node.fCost = 10000;\r\n      node.status = 1;\r\n    }\r\n  }\r\n}\r\n\r\nexport function animateShortestPathWithBomb(\r\n  nodesInShortestPathOrder,\r\n  nodesInShortestPathOrderTwo,\r\n  shortestPathSpeed\r\n) {\r\n  nodesInShortestPathOrder.shift();\r\n  nodesInShortestPathOrderTwo.shift();\r\n  const node = nodesInShortestPathOrder[0];\r\n  document.getElementById(`node-${node.row}-${node.col}`).className =\r\n    \"node-shortest-path-start \";\r\n  for (let i = 1; i < nodesInShortestPathOrder.length; i++) {\r\n    const node = nodesInShortestPathOrder[i];\r\n    setTimeout(() => {\r\n      if (i < nodesInShortestPathOrder.length - 1) {\r\n        const node = nodesInShortestPathOrder[i + 1];\r\n        const prevNode = nodesInShortestPathOrder[i];\r\n        if (prevNode.col > node.col) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node-shortest-path-pre-left\";\r\n        } else if (prevNode.col < node.col) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node-shortest-path-pre-right\";\r\n        } else if (prevNode.row < node.row) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node-shortest-path-pre-down\";\r\n        } else {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node-shortest-path-pre-up\";\r\n        }\r\n      }\r\n      document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        \"node-shortest-path\";\r\n      if (i === nodesInShortestPathOrder.length - 1) {\r\n        const node = nodesInShortestPathOrderTwo[0];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node-shortest-path-bomb\";\r\n        for (let j = 1; j < nodesInShortestPathOrderTwo.length; j++) {\r\n          const nodeTwo = nodesInShortestPathOrderTwo[j];\r\n          setTimeout(() => {\r\n            if (j < nodesInShortestPathOrderTwo.length - 1) {\r\n              const node = nodesInShortestPathOrderTwo[j + 1];\r\n              const prevNode = nodesInShortestPathOrderTwo[j];\r\n              if (prevNode.col > node.col) {\r\n                document.getElementById(\r\n                  `node-${node.row}-${node.col}`\r\n                ).className = \"node-shortest-path-pre-left\";\r\n              } else if (prevNode.col < node.col) {\r\n                document.getElementById(\r\n                  `node-${node.row}-${node.col}`\r\n                ).className = \"node-shortest-path-pre-right\";\r\n              } else if (prevNode.row < node.row) {\r\n                document.getElementById(\r\n                  `node-${node.row}-${node.col}`\r\n                ).className = \"node-shortest-path-pre-down\";\r\n              } else {\r\n                document.getElementById(\r\n                  `node-${node.row}-${node.col}`\r\n                ).className = \"node-shortest-path-pre-up\";\r\n              }\r\n            }\r\n\r\n            document.getElementById(\r\n              `node-${nodeTwo.row}-${nodeTwo.col}`\r\n            ).className = \"node-shortest-path\";\r\n            if (nodesInShortestPathOrderTwo[j].isStart) {\r\n              document.getElementById(\r\n                `node-${nodeTwo.row}-${nodeTwo.col}`\r\n              ).className = \"node-shortest-path-start\";\r\n            }\r\n          }, j * shortestPathSpeed);\r\n          if (j === nodesInShortestPathOrderTwo.length - 1) {\r\n            const node = nodesInShortestPathOrderTwo[j];\r\n            setTimeout(() => {\r\n              document.getElementById(\r\n                `node-${node.row}-${node.col}`\r\n              ).className = \"node-shortest-path-finish\";\r\n              algorithmDone = true;\r\n              document.getElementById(\"grid\").className = \"grid\";\r\n              document.getElementById(\"click\").style.pointerEvents = \"all\";\r\n              document.getElementById(\"click1\").style.pointerEvents = \"all\";\r\n              document.getElementById(\"click2\").style.pointerEvents = \"all\";\r\n              document.getElementById(\"click3\").style.pointerEvents = \"all\";\r\n              document.getElementById(\"click4\").style.pointerEvents = \"all\";\r\n              document.getElementById(\"click5\").style.pointerEvents = \"all\";\r\n              document.getElementById(\"click6\").style.pointerEvents = \"all\";\r\n            }, j * shortestPathSpeed);\r\n          }\r\n        }\r\n      }\r\n    }, i * shortestPathSpeed);\r\n  }\r\n}\r\n\r\nexport function makeVisible() {\r\n  document.getElementById(`node-${startNodeRow}-${startNodeCol}`).className =\r\n    \"node-start\";\r\n  document.getElementById(`node-${finishNodeRow}-${finishNodeCol}`).className =\r\n    \"node-finish\";\r\n}\r\n\r\nexport function animateSecond(\r\n  visitedNodesInOrder,\r\n  animationSpeed,\r\n  shortestPathSpeed,\r\n  nodesInShortestPathOrder,\r\n  nodesInShortestPathOrderTwo\r\n) {\r\n  const node = visitedNodesInOrder[0];\r\n  document.getElementById(`node-${node.row}-${node.col}`).className =\r\n    \"node-visited-start\";\r\n  for (let i = 1; i < visitedNodesInOrder.length; i++) {\r\n    if (i === visitedNodesInOrder.length - 1) {\r\n      setTimeout(() => {\r\n        animateShortestPathWithBomb(\r\n          nodesInShortestPathOrder,\r\n          nodesInShortestPathOrderTwo,\r\n          shortestPathSpeed\r\n        );\r\n      }, i * animationSpeed);\r\n    }\r\n\r\n    if (i < visitedNodesInOrder.length - 1) {\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i + 1];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node-pre\";\r\n      }, animationSpeed * i);\r\n    }\r\n\r\n    if (i === visitedNodesInOrder.length - 1) {\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node-visited-finish\";\r\n      }, animationSpeed * i);\r\n    } else if (\r\n      !(\r\n        visitedNodesInOrder[i].row === startNodeRow &&\r\n        visitedNodesInOrder[i].col === startNodeCol\r\n      )\r\n    ) {\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node-visited\";\r\n      }, animationSpeed * i);\r\n    } else {\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node-visited-start\";\r\n      }, animationSpeed * i);\r\n    }\r\n  }\r\n}\r\n\r\nexport function animateWithBomb(\r\n  visitedNodesInOrder,\r\n  nodesInShortestPathOrder,\r\n  visitedNodesInOrderTwo,\r\n  animationSpeed,\r\n  shortestPathSpeed,\r\n  nodesInShortestPathOrderTwo\r\n) {\r\n  const node = visitedNodesInOrder[0];\r\n  document.getElementById(`node-${node.row}-${node.col}`).className =\r\n    \"node-visited-start-bomb\";\r\n  for (let i = 1; i < visitedNodesInOrder.length; i++) {\r\n    if (i === visitedNodesInOrder.length - 1) {\r\n      setTimeout(() => {\r\n        animateSecond(\r\n          visitedNodesInOrderTwo,\r\n          animationSpeed,\r\n          shortestPathSpeed,\r\n          nodesInShortestPathOrder,\r\n          nodesInShortestPathOrderTwo\r\n        );\r\n      }, i * animationSpeed);\r\n    }\r\n\r\n    if (i < visitedNodesInOrder.length - 1) {\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i + 1];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node-pre\";\r\n      }, animationSpeed * i);\r\n    }\r\n\r\n    if (i === visitedNodesInOrder.length - 1) {\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"bomb-node-visited\";\r\n      }, animationSpeed * i);\r\n    } else if (\r\n      !(\r\n        visitedNodesInOrder[i].row === finishNodeRow &&\r\n        visitedNodesInOrder[i].col === finishNodeCol\r\n      )\r\n    ) {\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node-visited-bomb\";\r\n      }, animationSpeed * i);\r\n    } else {\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node-visited-finish-bomb\";\r\n      }, animationSpeed * i);\r\n    }\r\n  }\r\n}\r\n\r\nexport function animate(\r\n  visitedNodesInOrder,\r\n  nodesInShortestPathOrder,\r\n  animationSpeed,\r\n  shortestPathSpeed\r\n) {\r\n  const node = visitedNodesInOrder[0];\r\n  document.getElementById(`node-${node.row}-${node.col}`).className =\r\n    \"node-visited-start\";\r\n  for (let i = 1; i < visitedNodesInOrder.length; i++) {\r\n    if (i < visitedNodesInOrder.length - 1) {\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i + 1];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node-pre\";\r\n      }, animationSpeed * i);\r\n    }\r\n\r\n    if (i === visitedNodesInOrder.length - 1) {\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node-visited-finish\";\r\n        animateShortestPath(nodesInShortestPathOrder, shortestPathSpeed);\r\n      }, i * animationSpeed);\r\n    } else\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node-visited\";\r\n      }, animationSpeed * i);\r\n  }\r\n}\r\n\r\nexport function animateShortestPath(\r\n  nodesInShortestPathOrder,\r\n  shortestPathSpeed\r\n) {\r\n  nodesInShortestPathOrder.shift();\r\n  const node = nodesInShortestPathOrder[0];\r\n  document.getElementById(`node-${node.row}-${node.col}`).className =\r\n    \"node-shortest-path-start \";\r\n  for (let i = 1; i < nodesInShortestPathOrder.length; i++) {\r\n    if (i < nodesInShortestPathOrder.length - 1) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i + 1];\r\n        const prevNode = nodesInShortestPathOrder[i];\r\n        if (prevNode.col > node.col) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node-shortest-path-pre-left\";\r\n        } else if (prevNode.col < node.col) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node-shortest-path-pre-right\";\r\n        } else if (prevNode.row < node.row) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node-shortest-path-pre-down\";\r\n        } else {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node-shortest-path-pre-up\";\r\n        }\r\n      }, shortestPathSpeed * i);\r\n    }\r\n\r\n    if (i === nodesInShortestPathOrder.length - 1) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node-shortest-path-finish\";\r\n        algorithmDone = true;\r\n        document.getElementById(\"grid\").className = \"grid\";\r\n        document.getElementById(\"click\").style.pointerEvents = \"all\";\r\n        document.getElementById(\"click1\").style.pointerEvents = \"all\";\r\n        document.getElementById(\"click2\").style.pointerEvents = \"all\";\r\n        document.getElementById(\"click3\").style.pointerEvents = \"all\";\r\n        document.getElementById(\"click4\").style.pointerEvents = \"all\";\r\n        document.getElementById(\"click5\").style.pointerEvents = \"all\";\r\n        document.getElementById(\"click6\").style.pointerEvents = \"all\";\r\n      }, shortestPathSpeed * i);\r\n    } else {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node-shortest-path\";\r\n      }, shortestPathSpeed * i);\r\n    }\r\n  }\r\n}\r\n\r\nexport function handleMouseDown(row, col, isStart, isFinish, bomb) {\r\n  if (isStart) {\r\n    mouseOnStart = true;\r\n  } else if (isFinish) {\r\n    mouseOnFinish = true;\r\n  } else if (bomb) {\r\n    mouseOnBomb = true;\r\n  } else {\r\n    const newGrid = getGridWithWallToggled(grid, row, col);\r\n    grid = newGrid;\r\n    mouseIsPressed = true;\r\n    if (grid[row][col].isWall)\r\n      document.getElementById(`node-${row}-${col}`).className = \"node-wall\";\r\n    else document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n  }\r\n}\r\n\r\nexport function handleMouseUp(row, col) {\r\n  if (mouseOnStart) {\r\n    // const newGrid = makeStart(grid, row, col);\r\n    // grid = newGrid;\r\n    mouseOnStart = false;\r\n    // startNodeRow = row;\r\n    // startNodeCol = col;\r\n  } else if (mouseOnFinish) {\r\n    // const newGrid = makeFinish(grid, row, col);\r\n    // grid = newGrid;\r\n    mouseOnFinish = false;\r\n    // finishNodeRow = row;\r\n    // finishNodeCol = col;\r\n  } else if (mouseOnBomb) {\r\n    // const newGrid = makeBomb(grid, row, col);\r\n    // grid = newGrid;\r\n    mouseOnBomb = false;\r\n  } else {\r\n    mouseIsPressed = false;\r\n  }\r\n}\r\n\r\nexport function displayAlgorithmAfterwards(nodeToFix) {\r\n  if (!isBombActive) {\r\n    grid = getGrid(startNodeRow, startNodeCol, finishNodeRow, finishNodeCol);\r\n    const startNode = grid[startNodeRow][startNodeCol];\r\n    const finishNode = grid[finishNodeRow][finishNodeCol];\r\n    let visitedNodesInOrder;\r\n    if (algorithmDisplayed === \"Dijkstra´s\") {\r\n      visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n\r\n      animateAfter(visitedNodesInOrder, nodesInShortestPathOrder, nodeToFix);\r\n    } else if (algorithmDisplayed === \"Greedy\") {\r\n      visitedNodesInOrder = greedyBestFirstSearch(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n\r\n      animateAfter(visitedNodesInOrder, nodesInShortestPathOrder, nodeToFix);\r\n    } else if (algorithmDisplayed === \"A*\") {\r\n      visitedNodesInOrder = aStarSearch(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      animateAfter(visitedNodesInOrder, nodesInShortestPathOrder, nodeToFix);\r\n    } else if (algorithmDisplayed === \"DFS\") {\r\n      visitedNodesInOrder = depthFirstSearch(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n\r\n      animateAfter(visitedNodesInOrder, nodesInShortestPathOrder, nodeToFix);\r\n    } else if (algorithmDisplayed === \"BFS\") {\r\n      visitedNodesInOrder = breadthFirstSearch(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n\r\n      animateAfter(visitedNodesInOrder, nodesInShortestPathOrder, nodeToFix);\r\n    }\r\n  } else {\r\n    grid = getGrid(startNodeRow, startNodeCol, finishNodeRow, finishNodeCol);\r\n    const startNode = grid[startNodeRow][startNodeCol];\r\n    const finishNode = grid[finishNodeRow][finishNodeCol];\r\n    const bombNode = grid[bombNodeRow][bombNodeCol];\r\n    if (algorithmDisplayed === \"Dijkstra´s\") {\r\n      const visitedNodesInOrder = dijkstra(grid, startNode, bombNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(bombNode);\r\n      gridAfterBomb();\r\n\r\n      const visitedNodesInOrderTwo = dijkstra(grid, bombNode, finishNode);\r\n      const nodesInShortestPathOrderTwo =\r\n        getNodesInShortestPathOrder(finishNode);\r\n\r\n      animateAfterBomb(\r\n        visitedNodesInOrder,\r\n        visitedNodesInOrderTwo,\r\n        nodesInShortestPathOrder,\r\n        nodesInShortestPathOrderTwo,\r\n        nodeToFix\r\n      );\r\n    } else if (algorithmDisplayed === \"DFS\") {\r\n      const visitedNodesInOrder = depthFirstSearch(grid, startNode, bombNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(bombNode);\r\n      gridAfterBomb();\r\n      const visitedNodesInOrderTwo = depthFirstSearch(\r\n        grid,\r\n        bombNode,\r\n        finishNode\r\n      );\r\n      const nodesInShortestPathOrderTwo =\r\n        getNodesInShortestPathOrder(finishNode);\r\n      animateAfterBomb(\r\n        visitedNodesInOrder,\r\n        visitedNodesInOrderTwo,\r\n        nodesInShortestPathOrder,\r\n        nodesInShortestPathOrderTwo\r\n      );\r\n    } else if (algorithmDisplayed === \"Greedy\") {\r\n      const visitedNodesInOrder = greedyBestFirstSearch(\r\n        grid,\r\n        startNode,\r\n        bombNode\r\n      );\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(bombNode);\r\n      gridAfterBomb();\r\n      const visitedNodesInOrderTwo = greedyBestFirstSearch(\r\n        grid,\r\n        bombNode,\r\n        finishNode\r\n      );\r\n      const nodesInShortestPathOrderTwo =\r\n        getNodesInShortestPathOrder(finishNode);\r\n      animateAfterBomb(\r\n        visitedNodesInOrder,\r\n        visitedNodesInOrderTwo,\r\n        nodesInShortestPathOrder,\r\n        nodesInShortestPathOrderTwo\r\n      );\r\n    } else if (algorithmDisplayed === \"A*\") {\r\n      const visitedNodesInOrder = aStarSearch(grid, startNode, bombNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(bombNode);\r\n      gridAfterBomb();\r\n      const visitedNodesInOrderTwo = aStarSearch(grid, bombNode, finishNode);\r\n      const nodesInShortestPathOrderTwo =\r\n        getNodesInShortestPathOrder(finishNode);\r\n      animateAfterBomb(\r\n        visitedNodesInOrder,\r\n        visitedNodesInOrderTwo,\r\n        nodesInShortestPathOrder,\r\n        nodesInShortestPathOrderTwo\r\n      );\r\n    } else if (algorithmDisplayed === \"BFS\") {\r\n      const visitedNodesInOrder = breadthFirstSearch(grid, startNode, bombNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(bombNode);\r\n      gridAfterBomb();\r\n      const visitedNodesInOrderTwo = breadthFirstSearch(\r\n        grid,\r\n        bombNode,\r\n        finishNode\r\n      );\r\n      const nodesInShortestPathOrderTwo =\r\n        getNodesInShortestPathOrder(finishNode);\r\n      animateAfterBomb(\r\n        visitedNodesInOrder,\r\n        visitedNodesInOrderTwo,\r\n        nodesInShortestPathOrder,\r\n        nodesInShortestPathOrderTwo\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport function animateAfterBomb(\r\n  visitedNodesInOrder,\r\n  visitedNodesInOrderTwo,\r\n  nodesInShortestPathOrder,\r\n  nodesInShortestPathOrderTwo,\r\n  nodeToFix\r\n) {\r\n  for (let i = 0; i < visitedNodesInOrder.length; i++) {\r\n    const node = visitedNodesInOrder[i];\r\n\r\n    document.getElementById(`node-${node.row}-${node.col}`).className =\r\n      \"node-afterwards-purple\";\r\n  }\r\n  for (let i = 0; i < visitedNodesInOrderTwo.length; i++) {\r\n    const node = visitedNodesInOrderTwo[i];\r\n\r\n    document.getElementById(`node-${node.row}-${node.col}`).className =\r\n      \"node-afterwards\";\r\n  }\r\n\r\n  animateShortestPathAfterWithBomb(\r\n    nodesInShortestPathOrder,\r\n    nodesInShortestPathOrderTwo\r\n  );\r\n  for (let i = 0; i < grid.length; i++) {\r\n    for (let j = 0; j < grid[i].length; j++) {\r\n      if (\r\n        !nodesInShortestPathOrder.includes(grid[i][j]) &&\r\n        !nodesInShortestPathOrderTwo.includes(grid[i][j]) &&\r\n        !visitedNodesInOrder.includes(grid[i][j]) &&\r\n        !visitedNodesInOrderTwo.includes(grid[i][j]) &&\r\n        !grid[i][j].isStart &&\r\n        !grid[i][j].isFinish &&\r\n        !grid[i][j].isWall &&\r\n        !grid[i][j].isBomb\r\n      ) {\r\n        document.getElementById(`node-${i}-${j}`).className = \"node\";\r\n      }\r\n      if (\r\n        grid[i][j].isWall &&\r\n        !grid[i][j].isFinish &&\r\n        !grid[i][j].isStart &&\r\n        !grid[i][j].isBomb\r\n      ) {\r\n        document.getElementById(`node-${i}-${j}`).className = \"node-wall\";\r\n      }\r\n      if (i === bombNodeRow && j === bombNodeCol) {\r\n        document.getElementById(`node-${i}-${j}`).className =\r\n          \"node-shortest-path-bomb-after\";\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function animateAfter(\r\n  visitedNodesInOrder,\r\n  nodesInShortestPathOrder,\r\n  nodeToFix\r\n) {\r\n  for (let i = 0; i < grid.length; i++) {\r\n    for (let j = 0; j < grid[i].length; j++) {\r\n      if (\r\n        !nodesInShortestPathOrder.includes(grid[i][j]) &&\r\n        !visitedNodesInOrder.includes(grid[i][j]) &&\r\n        !grid[i][j].isStart &&\r\n        !grid[i][j].isFinish &&\r\n        !grid[i][j].isWall\r\n      ) {\r\n        document.getElementById(`node-${i}-${j}`).className = \"node\";\r\n      }\r\n      if (grid[i][j].isWall && !grid[i][j].isFinish && !grid[i][j].isBomb) {\r\n        document.getElementById(`node-${i}-${j}`).className = \"node-wall\";\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < visitedNodesInOrder.length; i++) {\r\n    const node = visitedNodesInOrder[i];\r\n    document.getElementById(`node-${node.row}-${node.col}`).className =\r\n      \"node-afterwards\";\r\n  }\r\n\r\n  animateShortestPathAfter(nodesInShortestPathOrder);\r\n}\r\n\r\nexport function getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter((neighbor) => neighbor.isVisited);\r\n}\r\n\r\nexport function animateShortestPathAfter(nodesInShortestPathOrder) {\r\n  nodesInShortestPathOrder.shift();\r\n\r\n  for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n    const node = nodesInShortestPathOrder[i];\r\n    document.getElementById(`node-${node.row}-${node.col}`).className =\r\n      \"shortest-path-afterwards\";\r\n  }\r\n\r\n  let node = nodesInShortestPathOrder[0];\r\n  document.getElementById(`node-${node.row}-${node.col}`).className =\r\n    \"node-shortest-path-pre-right\";\r\n\r\n  node = nodesInShortestPathOrder[nodesInShortestPathOrder.length - 1];\r\n  document.getElementById(`node-${node.row}-${node.col}`).className =\r\n    \"node-shortest-path-finish-after\";\r\n}\r\n\r\nexport function animateShortestPathAfterWithBomb(\r\n  nodesInShortestPathOrder,\r\n  nodesInShortestPathOrderTwo\r\n) {\r\n  nodesInShortestPathOrder.shift();\r\n\r\n  const node = nodesInShortestPathOrder[0];\r\n  document.getElementById(`node-${node.row}-${node.col}`).className =\r\n    \"node-shortest-path-pre-right\";\r\n\r\n  for (let i = 1; i < nodesInShortestPathOrder.length; i++) {\r\n    const node = nodesInShortestPathOrder[i];\r\n    document.getElementById(`node-${node.row}-${node.col}`).className =\r\n      \"shortest-path-afterwards\";\r\n\r\n    // if (i === nodesInShortestPathOrder.length - 1) {\r\n    //   const node = nodesInShortestPathOrder[i];\r\n    //   document.getElementById(`node-${node.row}-${node.col}`).className =\r\n    //     \"node-shortest-path-bomb-after\";\r\n    // }\r\n  }\r\n  nodesInShortestPathOrderTwo.shift();\r\n  const nodeTwo = nodesInShortestPathOrderTwo[0];\r\n  document.getElementById(`node-${nodeTwo.row}-${nodeTwo.col}`).className =\r\n    \"node-shortest-path-bomb-after\";\r\n  for (let i = 1; i < nodesInShortestPathOrderTwo.length; i++) {\r\n    const node = nodesInShortestPathOrderTwo[i];\r\n    document.getElementById(`node-${node.row}-${node.col}`).className =\r\n      \"shortest-path-afterwards\";\r\n\r\n    if (i === nodesInShortestPathOrderTwo.length - 1) {\r\n      const node = nodesInShortestPathOrderTwo[i];\r\n      document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        \"node-shortest-path-finish-after\";\r\n    }\r\n  }\r\n}\r\n\r\nexport function handleMouseEnter(row, col) {\r\n  if (mouseOnStart) {\r\n    startNodeRow = row;\r\n    startNodeCol = col;\r\n    const newGrid = makeStart(grid, row, col);\r\n    grid = newGrid;\r\n    mouseOnStart = true;\r\n    document.getElementById(`node-${startNodeRow}-${startNodeCol}`).className =\r\n      \"node-start\";\r\n    if (algorithmDone) {\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      displayAlgorithmAfterwards(startNode);\r\n    }\r\n  } else if (mouseOnFinish) {\r\n    finishNodeRow = row;\r\n    finishNodeCol = col;\r\n    const newGrid = makeFinish(grid, row, col);\r\n    grid = newGrid;\r\n    mouseOnFinish = true;\r\n    document.getElementById(\r\n      `node-${finishNodeRow}-${finishNodeCol}`\r\n    ).className = \"node-finish\";\r\n    if (algorithmDone) {\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      displayAlgorithmAfterwards(finishNode);\r\n    }\r\n  } else if (mouseIsPressed) {\r\n    if (\r\n      !grid[row][col].isStart &&\r\n      !grid[row][col].isFinish &&\r\n      !grid[row][col].isBomb\r\n    ) {\r\n      const newGrid = getGridWithWallToggled(grid, row, col);\r\n      grid = newGrid;\r\n    }\r\n    if (\r\n      grid[row][col].isWall &&\r\n      !grid[row][col].isStart &&\r\n      !grid[row][col].isFinish &&\r\n      !grid[row][col].isBomb\r\n    )\r\n      document.getElementById(`node-${row}-${col}`).className = \"node-wall\";\r\n    else if (\r\n      !grid[row][col].isStart &&\r\n      !grid[row][col].isFinish &&\r\n      !grid[row][col].isBomb\r\n    )\r\n      document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n  } else if (mouseOnBomb) {\r\n    bombNodeRow = row;\r\n    bombNodeCol = col;\r\n    const newGrid = makeBomb(grid, row, col);\r\n    grid = newGrid;\r\n    document.getElementById(`node-${bombNodeRow}-${bombNodeCol}`).className =\r\n      \"node-bomb\";\r\n\r\n    if (algorithmDone) {\r\n      const bombNode = grid[bombNodeRow][bombNodeCol];\r\n      displayAlgorithmAfterwards(bombNode);\r\n    }\r\n  }\r\n}\r\n\r\nexport function handleMouseLeave(row, col) {\r\n  if (mouseOnStart) {\r\n    const newGrid = deleteStart(grid, row, col);\r\n    grid = newGrid;\r\n    if (grid[row][col].isStart)\r\n      document.getElementById(\r\n        `node-${startNodeRow}-${startNodeCol}`\r\n      ).className = \"node-start\";\r\n    else if (grid[row][col].isWall)\r\n      document.getElementById(`node-${row}-${col}`).className = \"node-wall\";\r\n    else document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n  } else if (mouseOnFinish) {\r\n    const newGrid = deleteFinish(grid, row, col);\r\n    grid = newGrid;\r\n    if (grid[row][col].isFinish)\r\n      document.getElementById(\r\n        `node-${finishNodeRow}-${finishNodeCol}`\r\n      ).className = \"node-finish\";\r\n    else if (grid[row][col].isWall)\r\n      document.getElementById(`node-${row}-${col}`).className = \"node-wall\";\r\n    else document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n  } else if (mouseOnBomb) {\r\n    const newGrid = deleteBomb(grid, row, col);\r\n    grid = newGrid;\r\n    if (grid[row][col].isBomb)\r\n      document.getElementById(`node-${bombNodeRow}-${bombNodeCol}`).className =\r\n        \"node-bomb\";\r\n    else if (grid[row][col].isWall)\r\n      document.getElementById(`node-${row}-${col}`).className = \"node-wall\";\r\n    else document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n  }\r\n}\r\n\r\nexport function getGridWithWallToggled(grid, row, col) {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n}\r\n\r\nexport function makeStart(grid, row, col) {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isStart: true,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n\r\n  return newGrid;\r\n}\r\n\r\nexport function makeFinish(grid, row, col) {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isFinish: true,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n}\r\n\r\nexport function deleteStart(grid, row, col) {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isStart: false,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n}\r\n\r\nexport function deleteFinish(grid, row, col) {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isFinish: false,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n}\r\n\r\nexport function changeBomb(grid, row, col, bomb) {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isBomb: bomb,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  bombNodeRow = 15;\r\n  bombNodeCol = 37;\r\n  return newGrid;\r\n}\r\n\r\nexport function makeBomb(grid, row, col) {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isBomb: true,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n}\r\n\r\nexport function deleteBomb(grid, row, col) {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isBomb: false,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Node.css\";\r\nimport { isBombActive } from \"../PathfindingVisualizerFunctionalComponent\";\r\nimport { grid } from \"../PathfindingVisualizerFunctionalComponent\";\r\n\r\nlet mouseIsPressed = false;\r\nlet startMouseIsPressed = false;\r\nlet finishMouseIsPressed = false;\r\nlet bombMouseIsPressed = false;\r\nlet bombRow = 0;\r\nlet bombCol = 0;\r\n\r\nconst Node = ({\r\n  row,\r\n  col,\r\n  isFinish,\r\n  isStart,\r\n  isWall,\r\n  isBomb,\r\n  onMouseDown,\r\n  onMouseEnter,\r\n  onMouseUp,\r\n  onMouseLeave,\r\n}) => {\r\n  const [wall, setWall] = useState(isWall);\r\n  const [start, setStart] = useState(isStart);\r\n  const [finish, setFinish] = useState(isFinish);\r\n  const [bomb, setBomb] = useState(isBomb);\r\n\r\n  useEffect(() => {\r\n    if (row === bombRow && col === bombCol && !isBombActive) setBomb(false);\r\n    else setBomb(isBomb);\r\n  }, [col, row, isBomb, isWall]);\r\n\r\n  const changeNode = () => {\r\n    if (!start && !finish && !isBomb && mouseIsPressed) {\r\n      setWall(!wall);\r\n    }\r\n  };\r\n\r\n  const changeStart = () => {\r\n    if (startMouseIsPressed && !finish && !bomb) {\r\n      setStart(!start);\r\n      className = \"node\";\r\n    }\r\n  };\r\n\r\n  const changeFinish = () => {\r\n    if (finishMouseIsPressed && !start) {\r\n      setFinish(!finish);\r\n    }\r\n  };\r\n\r\n  const changeBomb = () => {\r\n    if (bombMouseIsPressed) {\r\n      setBomb(!bomb);\r\n      className = \"node\";\r\n      bombRow = row;\r\n      bombCol = col;\r\n    }\r\n  };\r\n\r\n  const delteMouse = () => {\r\n    startMouseIsPressed = false;\r\n\r\n    finishMouseIsPressed = false;\r\n\r\n    bombMouseIsPressed = false;\r\n\r\n    mouseIsPressed = false;\r\n  };\r\n\r\n  const changeMouseIsPressed = () => {\r\n    if (start) {\r\n      startMouseIsPressed = !startMouseIsPressed;\r\n    } else if (finish) {\r\n      finishMouseIsPressed = !finishMouseIsPressed;\r\n    } else if (bomb) {\r\n      bombMouseIsPressed = !bombMouseIsPressed;\r\n    } else {\r\n      mouseIsPressed = !mouseIsPressed;\r\n    }\r\n  };\r\n\r\n  let className = \"node\";\r\n\r\n  return (\r\n    <div\r\n      className={className}\r\n      id={`node-${row}-${col}`}\r\n      onMouseDown={() => {\r\n        onMouseDown(row, col, grid[row][col].isStart, finish, bomb);\r\n        changeMouseIsPressed();\r\n        changeNode();\r\n      }}\r\n      onMouseEnter={() => {\r\n        onMouseEnter(row, col, grid[row][col].isStart, finish, bomb);\r\n        changeNode();\r\n        changeStart();\r\n        changeFinish();\r\n        changeBomb();\r\n      }}\r\n      onMouseLeave={() => {\r\n        onMouseLeave(row, col);\r\n        changeStart();\r\n        changeFinish();\r\n        changeBomb();\r\n      }}\r\n      onMouseUp={() => {\r\n        onMouseUp(row, col);\r\n        delteMouse();\r\n      }}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default Node;\r\n","import PathfindingVisualizerFunctionalComponent from \"./PathfindingVisualizer/PathfindingVisualizerFunctionalComponent.jsx\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return <PathfindingVisualizerFunctionalComponent />;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}