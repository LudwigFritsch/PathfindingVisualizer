export function aStarSearch(grid, startNode, endNode) {
  const closedSet = [];
  const openSet = getGrid(grid);
  startNode.gCost = 0;
  startNode.hCost = hCost(startNode, endNode);
  startNode.fCost = fCost(startNode);

  //
  //
  //
  while (openSet.length > 0) {
    sortNodesByDistance(openSet);
    if (openSet[0].fCost === openSet[1].fCost) {
      console.log("y");
      sortNodesByHCost(openSet);
    }
    const curNode = openSet.shift();
    closedSet.push(curNode);
    if (curNode.isWall === true) continue;
    curNode.isVisited = true;
    if (curNode === endNode) return closedSet;
    const neighbors = getUnvisitedNeighbors(curNode, grid);
    for (let i = 0; i < neighbors.length; i++) {
      const neighbor = neighbors[i];
      if (neighbor.isWall === true || closedSet.includes(neighbor)) {
        continue;
      }
      const newMovementCostToNeighbor = curNode.fCost + 1;
      if (
        newMovementCostToNeighbor < neighbor.fCost ||
        !openSet.includes(neighbor)
      ) {
        neighbor.gCost = newMovementCostToNeighbor;
        neighbor.hCost = hCost(neighbor, endNode);
        neighbor.fCost = fCost(neighbor);
        neighbor.prevNode = curNode;
        if (!openSet.includes(neighbor)) {
          openSet.push(neighbor);
        }
      }
    }
  }
}

export function sortNodesByHCost(openSet) {
  openSet.sort((a, b) => a.hCost - b.hCost);
}

export function getUnvisitedNeighbors(node, grid) {
  const neighbors = [];
  const { col, row } = node;
  if (row > 0) neighbors.push(grid[row - 1][col]);
  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);
  if (col > 0) neighbors.push(grid[row][col - 1]);
  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);
  return neighbors;
}

export function getDistance(nodeA, nodeB) {
  const distaceX = Math.abs(nodeA.col - nodeB.col);
  const distanceY = Math.abs(nodeA.row - nodeB.row);
  const distaceTotal = distaceX + distanceY;
  return distaceTotal;
}

export function getGrid(grid) {
  let nodes = [];
  for (let i = 0; i < grid.length; i++) {
    for (let j = 0; j < grid[i].length; j++) {
      nodes.push(grid[i][j]);
    }
  }
  return nodes;
}

export function sortNodesByDistance(unvisitedNodes) {
  unvisitedNodes.sort((a, b) => a.fCost - b.fCost);
}

export function fCost(node) {
  const fCost = node.gCost + node.hCost;
  return fCost;
}

export function hCost(curNode, endNode) {
  const distanceX = Math.abs(curNode.col - endNode.col);
  const distanceY = Math.abs(curNode.row - endNode.row);
  return distanceX + distanceY;
}
